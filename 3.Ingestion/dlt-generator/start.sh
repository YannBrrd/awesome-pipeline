#!/bin/bash
#
# Assistant de d√©marrage pour le g√©n√©rateur DLT
# Usage: ./start.sh [install|test|demo|help]
#

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

function print_banner() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                          üöÄ G√©n√©rateur DLT                                  ‚ïë"
    echo "‚ïë                  Data contracts ‚Üí Scripts d'ingestion DLT                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

function install_dlt_generator() {
    echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
    
    if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
        echo -e "${RED}‚ùå Python n'est pas install√© ou pas dans le PATH${NC}"
        exit 1
    fi
    
    # Utiliser python3 si disponible, sinon python
    PYTHON_CMD="python3"
    if ! command -v python3 &> /dev/null; then
        PYTHON_CMD="python"
    fi
    
    PYTHON_VERSION=$(${PYTHON_CMD} --version)
    echo -e "${GREEN}üêç ${PYTHON_VERSION} d√©tect√©${NC}"
    
    ${PYTHON_CMD} -m pip install -r requirements.txt
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Installation termin√©e avec succ√®s!${NC}"
    else
        echo -e "${RED}‚ùå √âchec de l'installation${NC}"
        exit 1
    fi
}

function test_dlt_generator() {
    echo -e "${BLUE}üß™ Ex√©cution des tests de validation...${NC}"
    
    PYTHON_CMD="python3"
    if ! command -v python3 &> /dev/null; then
        PYTHON_CMD="python"
    fi
    
    ${PYTHON_CMD} test_generator.py
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tous les tests sont pass√©s!${NC}"
    else
        echo -e "${RED}‚ùå Certains tests ont √©chou√©${NC}"
        exit 1
    fi
}

function start_demo() {
    echo -e "${BLUE}üé¨ D√©monstration du g√©n√©rateur...${NC}"
    echo ""
    
    PYTHON_CMD="python3"
    if ! command -v python3 &> /dev/null; then
        PYTHON_CMD="python"
    fi
    
    # G√©n√©ration avec contrat d'exemple DuckDB
    echo -e "${YELLOW}1Ô∏è‚É£ G√©n√©ration d'un pipeline DuckDB...${NC}"
    ${PYTHON_CMD} generate.py --contract ../../1.Data_contract/contract.yaml --out demo-duckdb
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Pipeline DuckDB g√©n√©r√© dans demo-duckdb/${NC}"
        echo ""
        
        echo -e "${CYAN}üìÅ Fichiers g√©n√©r√©s:${NC}"
        if [ -d "demo-duckdb" ]; then
            for file in demo-duckdb/*; do
                if [ -f "$file" ]; then
                    echo -e "  ${WHITE}üìÑ $(basename "$file")${NC}"
                fi
            done
        fi
        echo ""
        
        echo -e "${YELLOW}üìñ Prochaines √©tapes:${NC}"
        echo -e "  ${WHITE}1. √âditez demo-duckdb/.env.example avec vos credentials${NC}"
        echo -e "  ${WHITE}2. Renommez-le en .env${NC}"
        echo -e "  ${WHITE}3. Ex√©cutez: python demo-duckdb/ingest.py${NC}"
        echo ""
        
        echo -e "${YELLOW}üìö Documentation:${NC}"
        echo -e "  ${WHITE}‚Ä¢ demo-duckdb/README.md - Guide du pipeline g√©n√©r√©${NC}"
        echo -e "  ${WHITE}‚Ä¢ DEMO.md - Guide de d√©monstration d√©taill√©${NC}"
        echo -e "  ${WHITE}‚Ä¢ README.md - Documentation compl√®te${NC}"
    else
        echo -e "${RED}‚ùå √âchec de la g√©n√©ration${NC}"
        exit 1
    fi
}

function show_help() {
    echo -e "${WHITE}"
    cat << 'EOF'
üîß G√©n√©rateur DLT - Assistant de d√©marrage
=========================================

ACTIONS DISPONIBLES:
  install     Installer les d√©pendances Python
  test        Ex√©cuter les tests de validation  
  demo        G√©n√©rer un pipeline d'exemple
  help        Afficher cette aide

USAGE:
  ./start.sh install
  ./start.sh test
  ./start.sh demo

USAGE MANUEL:
  python generate.py --contract path/to/contract.yaml --out ./build

EXEMPLES DE CONTRATS:
  ../../1.Data_contract/contract.yaml         - Pipeline DuckDB basique
  ../../1.Data_contract/contract-bigquery.yaml - Pipeline BigQuery avanc√©

DESTINATIONS SUPPORT√âES:
  ‚Ä¢ DuckDB (local, id√©al pour d√©veloppement)
  ‚Ä¢ PostgreSQL (base de donn√©es relationnelle)  
  ‚Ä¢ BigQuery (Google Cloud, data warehouse)
  ‚Ä¢ Snowflake (cloud data platform)
  ‚Ä¢ Databricks (analytics platform)

SOURCES SUPPORT√âES:
  ‚Ä¢ API HTTP avec auth Bearer Token ou Basic
  ‚Ä¢ Pagination par num√©ro de page
  ‚Ä¢ Expectations de validation des donn√©es

DOCUMENTATION:
  üìñ README.md   - Documentation compl√®te du g√©n√©rateur
  üé¨ DEMO.md     - Guide de d√©monstration pas-√†-pas
  üß™ test_generator.py - Tests de validation

SUPPORT:
  Ce g√©n√©rateur fait partie de awesome-pipeline.
  Voir ../../2.Validation/README.md pour l'int√©gration compl√®te.
EOF
    echo -e "${NC}"
}

# Point d'entr√©e principal
print_banner

ACTION=${1:-help}

case "$ACTION" in
    "install")
        install_dlt_generator
        ;;
    "test")
        test_dlt_generator
        ;;
    "demo")
        start_demo
        ;;
    "help"|*)
        show_help
        ;;
esac

# G√©n√©rateur DLT - Makefile
# Usage: make [install|test|demo|clean|help]

PYTHON := $(shell command -v python3 2> /dev/null || echo python)
PIP := $(PYTHON) -m pip

.PHONY: install test demo clean help

# Installation des d√©pendances
install:
	@echo "üì¶ Installation des d√©pendances..."
	@$(PIP) install -r requirements.txt
	@echo "‚úÖ Installation termin√©e!"

# Ex√©cution des tests
test:
	@echo "üß™ Ex√©cution des tests de validation..."
	@$(PYTHON) test_generator.py

# D√©monstration avec pipeline DuckDB
demo:
	@echo "üé¨ G√©n√©ration d'un pipeline d'exemple..."
	@$(PYTHON) generate.py --contract ../../1.Data_contract/contract.yaml --out demo-duckdb
	@echo "‚úÖ Pipeline g√©n√©r√© dans demo-duckdb/"
	@echo ""
	@echo "üìñ Prochaines √©tapes:"
	@echo "  1. √âditez demo-duckdb/.env.example avec vos credentials"
	@echo "  2. Renommez-le en .env"  
	@echo "  3. Ex√©cutez: python demo-duckdb/ingest.py"

# D√©monstration BigQuery
demo-bigquery:
	@echo "‚òÅÔ∏è G√©n√©ration d'un pipeline BigQuery..."
	@$(PYTHON) generate.py --contract ../../1.Data_contract/contract-bigquery.yaml --out demo-bigquery
	@echo "‚úÖ Pipeline BigQuery g√©n√©r√© dans demo-bigquery/"

# Nettoyage des builds de test
clean:
	@echo "üßπ Nettoyage des builds de test..."
	@rm -rf demo-* build-* test-* __pycache__ *.pyc
	@echo "‚úÖ Nettoyage termin√©"

# G√©n√©ration personnalis√©e
# Usage: make generate CONTRACT=path/to/contract.yaml OUT=output-dir
generate:
	@if [ -z "$(CONTRACT)" ]; then \
		echo "‚ùå Veuillez sp√©cifier CONTRACT=path/to/contract.yaml"; \
		exit 1; \
	fi
	@$(PYTHON) generate.py --contract $(CONTRACT) --out $(or $(OUT),build)

# Validation d'un contrat
# Usage: make validate CONTRACT=path/to/contract.yaml  
validate:
	@if [ -z "$(CONTRACT)" ]; then \
		echo "‚ùå Veuillez sp√©cifier CONTRACT=path/to/contract.yaml"; \
		exit 1; \
	fi
	@$(PYTHON) -c "from contract_model import Contract; import yaml; Contract.model_validate(yaml.safe_load(open('$(CONTRACT)')))"
	@echo "‚úÖ Contrat $(CONTRACT) valide"

# Aide
help:
	@echo "üîß G√©n√©rateur DLT - Commandes Make disponibles"
	@echo "=============================================="
	@echo ""
	@echo "COMMANDES PRINCIPALES:"
	@echo "  make install          - Installer les d√©pendances Python"
	@echo "  make test            - Ex√©cuter les tests de validation"
	@echo "  make demo            - G√©n√©rer un pipeline d'exemple (DuckDB)"
	@echo "  make demo-bigquery   - G√©n√©rer un pipeline BigQuery"
	@echo "  make clean           - Nettoyer les builds de test"
	@echo "  make help            - Afficher cette aide"
	@echo ""
	@echo "COMMANDES AVANC√âES:"
	@echo "  make generate CONTRACT=contract.yaml OUT=build"
	@echo "  make validate CONTRACT=contract.yaml"
	@echo ""
	@echo "USAGE MANUEL:"
	@echo "  python generate.py --contract examples/contract.yaml --out ./build"
	@echo ""
	@echo "EXEMPLES:"
	@echo "  make generate CONTRACT=examples/contract.yaml OUT=my-pipeline"
	@echo "  make validate CONTRACT=examples/contract-bigquery.yaml"
	@echo ""
	@echo "DOCUMENTATION:"
	@echo "  üìñ README.md - Documentation compl√®te"
	@echo "  üé¨ DEMO.md   - Guide de d√©monstration"

#!/bin/bash
#
# Script de validation des data contracts avec Data Contract CLI
# Usage: ./validate.sh [contract.yaml|all]
#

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

CONTRACTS_DIR="../1.Data_contract"

function print_banner() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                          üîç Validation Data Contracts                       ‚ïë"
    echo "‚ïë                      Data Contract CLI + Pydantic                           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

function check_dependencies() {
    echo -e "${BLUE}üì¶ V√©rification des d√©pendances...${NC}"
    
    # V√©rifier datacontract CLI
    if ! command -v datacontract &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Data Contract CLI non trouv√©. Installation...${NC}"
        pip install datacontract-cli
        
        if ! command -v datacontract &> /dev/null; then
            echo -e "${RED}‚ùå √âchec de l'installation de datacontract-cli${NC}"
            echo "Installez manuellement avec: pip install datacontract-cli"
            exit 1
        fi
    fi
    
    # V√©rifier Python
    PYTHON_CMD="python3"
    if ! command -v python3 &> /dev/null; then
        PYTHON_CMD="python"
    fi
    
    if ! command -v $PYTHON_CMD &> /dev/null; then
        echo -e "${RED}‚ùå Python non trouv√©${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ D√©pendances OK${NC}"
    echo "  datacontract: $(datacontract --version 2>/dev/null || echo 'install√©')"
    echo "  python: $($PYTHON_CMD --version)"
}

function validate_contract() {
    local contract_file="$1"
    local contract_name=$(basename "$contract_file" .yaml)
    
    echo -e "${BLUE}üîç Validation de ${contract_name}...${NC}"
    
    # Validation avec Data Contract CLI
    echo -e "  ${CYAN}üìã Data Contract CLI lint...${NC}"
    if datacontract lint "$contract_file"; then
        echo -e "  ${GREEN}‚úÖ Data Contract CLI: OK${NC}"
    else
        echo -e "  ${RED}‚ùå Data Contract CLI: ERREUR${NC}"
        return 1
    fi
    
    # Test de structure YAML
    echo -e "  ${CYAN}üìÑ Structure YAML...${NC}"
    if python3 -c "import yaml; yaml.safe_load(open('$contract_file'))" 2>/dev/null; then
        echo -e "  ${GREEN}‚úÖ YAML valide${NC}"
    else
        echo -e "  ${RED}‚ùå YAML invalide${NC}"
        return 1
    fi
    
    # Validation custom si disponible
    if [ -f "contract_validator.py" ]; then
        echo -e "  ${CYAN}üêç Validation custom...${NC}"
        if python3 contract_validator.py "$contract_file" 2>/dev/null; then
            echo -e "  ${GREEN}‚úÖ Validation custom: OK${NC}"
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è Validation custom: √©chec (non bloquant)${NC}"
        fi
    fi
    
    echo -e "${GREEN}üéâ ${contract_name} valid√© avec succ√®s${NC}"
    return 0
}

function validate_all_contracts() {
    echo -e "${BLUE}üìÅ Recherche des contrats dans ${CONTRACTS_DIR}...${NC}"
    
    local contracts_found=0
    local contracts_valid=0
    local contracts_failed=0
    
    # Chercher les fichiers contract.yaml et *.yaml dans les sous-r√©pertoires
    while IFS= read -r -d '' contract_file; do
        ((contracts_found++))
        echo ""
        if validate_contract "$contract_file"; then
            ((contracts_valid++))
        else
            ((contracts_failed++))
        fi
    done < <(find "$CONTRACTS_DIR" -name "*.yaml" -type f -print0)
    
    echo ""
    echo -e "${CYAN}üìä R√©sum√© de validation:${NC}"
    echo "  Contrats trouv√©s: $contracts_found"
    echo -e "  ${GREEN}‚úÖ Valides: $contracts_valid${NC}"
    if [ $contracts_failed -gt 0 ]; then
        echo -e "  ${RED}‚ùå √âchou√©s: $contracts_failed${NC}"
        return 1
    else
        echo -e "  ${RED}‚ùå √âchou√©s: $contracts_failed${NC}"
        return 0
    fi
}

function test_datacontract_cli() {
    echo -e "${BLUE}üß™ Test de Data Contract CLI...${NC}"
    
    # Test avec un contrat d'exemple
    local test_contract="$CONTRACTS_DIR/olist_mini/contract.yaml"
    
    if [ ! -f "$test_contract" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Contrat de test non trouv√©: $test_contract${NC}"
        return 0
    fi
    
    echo -e "${CYAN}  Test lint...${NC}"
    if datacontract lint "$test_contract"; then
        echo -e "${GREEN}  ‚úÖ Test lint: OK${NC}"
    else
        echo -e "${RED}  ‚ùå Test lint: ERREUR${NC}"
        return 1
    fi
    
    echo -e "${CYAN}  Test export (si support√©)...${NC}"
    if datacontract export --format jsonschema "$test_contract" > /dev/null 2>&1; then
        echo -e "${GREEN}  ‚úÖ Test export: OK${NC}"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è Test export: non support√© ou √©chec${NC}"
    fi
    
    return 0
}

function show_help() {
    echo -e "${WHITE}"
    cat << 'EOF'
üîç Validation Data Contracts
============================

USAGE:
  ./validate.sh [contract.yaml|all|test|help]

COMMANDES:
  ./validate.sh all                    - Valider tous les contrats
  ./validate.sh contract.yaml          - Valider un contrat sp√©cifique
  ./validate.sh test                   - Tester Data Contract CLI
  ./validate.sh help                   - Afficher cette aide

EXEMPLES:
  ./validate.sh all
  ./validate.sh ../1.Data_contract/olist_mini/contract.yaml
  ./validate.sh ../1.Data_contract/contract.yaml

VALIDATION EFFECTU√âE:
  ‚úÖ Data Contract CLI lint
  ‚úÖ Structure YAML
  ‚úÖ Validation custom (si disponible)

D√âPENDANCES:
  ‚Ä¢ datacontract-cli (install√© automatiquement si manquant)
  ‚Ä¢ python3
  ‚Ä¢ pyyaml

INTEGRATION:
  Ce script fait partie du workflow awesome-pipeline:
  1. Data contracts (1.Data_contract/)
  2. Validation (2.Validation/) ‚Üê VOUS √äTES ICI
  3. G√©n√©ration DLT (3.Ingestion/dlt-generator/)
EOF
    echo -e "${NC}"
}

# Point d'entr√©e principal
print_banner

# V√©rifier les d√©pendances
check_dependencies
echo ""

# Parser les arguments
case "${1:-all}" in
    "all")
        validate_all_contracts
        ;;
    "test")
        test_datacontract_cli
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *.yaml|*.yml)
        if [ -f "$1" ]; then
            validate_contract "$1"
        else
            echo -e "${RED}‚ùå Fichier non trouv√©: $1${NC}"
            exit 1
        fi
        ;;
    *)
        echo -e "${RED}‚ùå Argument invalide: $1${NC}"
        show_help
        exit 1
        ;;
esac
